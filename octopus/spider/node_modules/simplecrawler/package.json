{
  "name": "simplecrawler",
  "description": "Very straightforward web crawler. Uses EventEmitter. Generates queue statistics and has a basic cache mechanism with extensible backend.",
  "version": "0.6.2",
  "homepage": "https://github.com/cgiffard/node-simplecrawler",
  "author": {
    "name": "Christopher Giffard",
    "email": "christopher.giffard@cgiffard.com"
  },
  "license": "BSD-2-Clause",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/cgiffard/node-simplecrawler.git"
  },
  "bugs": {
    "url": "https://github.com/cgiffard/node-simplecrawler/issues"
  },
  "keywords": [
    "simple",
    "crawler",
    "spider",
    "cache",
    "queue",
    "simplecrawler",
    "eventemitter"
  ],
  "scripts": {
    "lint": "eslint example/ lib/ test/",
    "mocha": "mocha -R spec -t 5000",
    "test": "npm run lint && npm run mocha"
  },
  "bin": {
    "crawl": "./lib/cli.js"
  },
  "main": "./lib/index.js",
  "dependencies": {
    "iconv-lite": "^0.4.13",
    "robots-parser": "^1.0.0",
    "urijs": "^1.16.1"
  },
  "devDependencies": {
    "chai": "^3.2.0",
    "eslint": "^2.0.0",
    "mocha": "^2.3.2"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "files": [
    "lib"
  ],
  "gitHead": "79aba4906c04ad9da6aabbc922725825d32897a2",
  "readme": "# Simple web crawler for node.js\n\n[![NPM version](https://img.shields.io/npm/v/simplecrawler.svg)](https://www.npmjs.com/package/simplecrawler)\n[![Linux Build Status](https://img.shields.io/travis/cgiffard/node-simplecrawler/master.svg)](https://travis-ci.org/cgiffard/node-simplecrawler)\n[![Windows Build Status](https://img.shields.io/appveyor/ci/cgiffard/node-simplecrawler/master.svg?label=Windows%20build)](https://ci.appveyor.com/project/cgiffard/node-simplecrawler/branch/master)\n[![Dependency Status](https://img.shields.io/david/cgiffard/node-simplecrawler.svg)](https://david-dm.org/cgiffard/node-simplecrawler)\n[![devDependency Status](https://img.shields.io/david/dev/cgiffard/node-simplecrawler.svg)](https://david-dm.org/cgiffard/node-simplecrawler#info=devDependencies)\n\nsimplecrawler is designed to provide a basic, flexible and robust API for\ncrawling websites. I wrote simplecrawler to archive, analyse, and search some\nvery large websites. It has happily chewed through hundreds of thousands of\npages and written tens of gigabytes to disk without issue.\n\n### What does simplecrawler do?\n\n* Provides a very simple event driven API using `EventEmitter`\n* Extremely configurable base for writing your own crawler\n* Provides some simple logic for auto-detecting linked resources - which you can\nreplace or augment\n* Automatically respects any robots.txt rules\n* Has a flexible queue system which can be frozen to disk and defrosted\n* Provides basic statistics on network performance\n* Uses buffers for fetching and managing data, preserving binary data (except\nwhen discovering links)\n\n## Documentation\n- [Getting started](#getting-started)\n    - [Simplified mode](#simplified-mode)\n    - [Regular mode](#regular-mode)\n- [Events](#events)\n    - [A note about HTTP error conditions](#a-note-about-http-error-conditions)\n    - [Waiting for asynchronous event listeners](#waiting-for-asynchronous-event-listeners)\n- [Configuration](#configuration)\n- [Fetch conditions](#fetch-conditions)\n- [The queue](#the-queue)\n    - [Manually adding to the queue](#manually-adding-to-the-queue)\n    - [Queue items](#queue-items)\n    - [Queue statistics and reporting](#queue-statistics-and-reporting)\n    - [Saving and reloading the queue (freeze/defrost)](#saving-and-reloading-the-queue-freezedefrost)\n- [Cookies](#cookies)\n    - [Cookie events](#cookie-events)\n- [Link Discovery](#link-discovery)\n- [FAQ/Troubleshooting](#faqtroubleshooting)\n- [Current Maintainers](#current-maintainers)\n- [Contributors](#contributors)\n- [License](#license)\n\n## Getting Started\n\nThere are two ways of instantiating a new crawler - a simplified but less\nflexible method inspired by [anemone](http://anemone.rubyforge.org), and the\ntraditional method which provides a little more room to configure crawl\nparameters.\n\nRegardless of whether you use the simplified or regular method of instantiation,\nyou'll need to require simplecrawler first:\n\n```js\nvar Crawler = require(\"simplecrawler\");\n```\n\n### Simplified Mode\n\nIf all you need is a quick crawl of a small website, the simplified mode of\ninitiating the crawler provides a slightly quicker way of getting started. It\ngenerates a new crawler for you, preconfigures it based on a URL you provide,\nstarts the crawl and returns the crawler instance for further configuration and\nso that you can attach event handlers.\n\nSimply call `Crawler.crawl` with a URL as the first parameter, and two optional\nfunctions that will be added as event listeners for `fetchcomplete` and\n`fetcherror` respectively.\n\n```js\nCrawler.crawl(\"http://example.com/\", function(queueItem) {\n    console.log(\"Completed fetching resource:\", queueItem.url);\n});\n```\n\nAlternately, if you decide to omit these functions, you can use the returned\ncrawler object to add the event listeners yourself, and tweak configuration\noptions:\n\n```js\nvar crawler = Crawler.crawl(\"http://example.com/\");\n\ncrawler.interval = 500;\n\ncrawler.on(\"fetchcomplete\", function(queueItem) {\n    console.log(\"Completed fetching resource:\", queueItem.url);\n});\n```\n\n### Regular Mode\n\nThe standard way of creating a crawler is to call the `simplecrawler`\nconstructor yourself and initiate the crawl manually.\n\n```js\nvar crawler = new Crawler(\"www.example.com\");\n```\n\nNon-standard port? HTTPS? Want to start crawling at a specific path? No problem:\n\n```js\ncrawler.initialPath = \"/archive\";\ncrawler.initialPort = 8080;\ncrawler.initialProtocol = \"https\";\n\n// Or:\nvar crawler = new Crawler(\"www.example.com\", \"/archive\", 8080);\n\n```\n\nAnd of course, you're probably wanting to ensure you don't take down your web\nserver. Decrease the concurrency from five simultaneous requests - and increase\nthe request interval from the default 250 ms like this:\n\n```js\ncrawler.interval = 10000; // Ten seconds\ncrawler.maxConcurrency = 1;\n```\n\nYou can also define a max depth for links to fetch:\n\n```js\ncrawler.maxDepth = 1; // Only first page is fetched (with linked CSS & images)\n// Or:\ncrawler.maxDepth = 2; // First page and discovered links from it are fetched\n// Or:\ncrawler.maxDepth = 3; // Etc.\n```\n\nFor a full list of configurable properties, see the\n[configuration section](#configuration).\n\nYou'll also need to set up event listeners for the [events](#events) you want to\nlisten to. `fetchcomplete` and `complete` are a good place to start.\n\n```js\ncrawler.on(\"fetchcomplete\", function(queueItem, responseBuffer, response) {\n    console.log(\"I just received %s (%d bytes)\", queueItem.url, responseBuffer.length);\n    console.log(\"It was a resource of type %s\", response.headers['content-type']);\n});\n```\n\nThen, when you're satisfied and ready to go, start the crawler! It'll run\nthrough its queue finding linked resources on the domain to download, until it\ncan't find any more.\n\n```js\ncrawler.start();\n```\n\n## Events\n\nsimplecrawler's API is event driven, and there are plenty of events emitted\nduring the different stages of the crawl. Arguments passed to events are written\nin parentheses.\n\n* `crawlstart` -\n    Fired when the crawl begins or is restarted.\n* `queueadd` (queueItem) -\n    Fired when a new item is automatically added to the queue (not when you\n    manually queue an item yourself).\n* `queueduplicate` (URLData) -\n    Fired when an item cannot be added to the queue because it is already\n    present in the queue. Frequent firing of this event is normal and expected.\n* `queueerror` (errorData, URLData) -\n    Fired when an item cannot be added to the queue due to error.\n* `robotstxterror` (error) -\n    Fired when robots.txt couldn't be fetched. `error.message` has details on\n    why.\n* `fetchstart` (queueItem, requestOptions) -\n    Fired when an item is spooled for fetching. If your event handler is\n    synchronous, you can modify the crawler request options (including headers\n    and request method.)\n* `fetchheaders` (queueItem, responseObject) -\n    Fired when the headers for a resource are received from the server. The node\n    http response object is returned for your perusal.\n* `cookieerror` (queueItem, error, setCookieHeader) -\n    Fired when an error was caught trying to add a cookie to the cookie jar.\n* `fetchcomplete` (queueItem, responseBody, responseObject) -\n    Fired when the resource is completely downloaded. The response body is\n    provided as a Buffer per default, unless `decodeResponses` is truthy, in\n    which case it's a decoded string representation of the body.\n* `fetchdisallowed` (parsedURL) -\n    Fired when a resource isn't fetched due to robots.txt rules. See\n    `respectRobotsTxt` option. See [Adding a fetch\n    condition](#adding-a-fetch-condition) for details on the `parsedURL` object.\n* `fetchdataerror` (queueItem, response) -\n    Fired when a resource can't be downloaded, because it exceeds the maximum\n    size we're prepared to receive (16MB by default.)\n* `fetchredirect` (queueItem, parsedURL, response) -\n    Fired when a redirect header is encountered. The new URL is validated and\n    returned as a complete canonical link to the new resource.\n* `fetch404` (queueItem, response) -\n    Fired when a 404 HTTP status code is returned for a request.\n* `fetch410` (queueItem, response) -\n    Fired when a 410 HTTP status code is returned for a request.\n* `fetcherror` (queueItem, response) -\n    Fired when an alternate 400 or 500 series HTTP status code is returned for a\n    request.\n* `gziperror` (queueItem, error, resourceData) -\n    Fired when a gzipped resource cannot be unzipped.\n* `fetchtimeout` (queueItem, crawlerTimeoutValue) -\n    Fired when a request time exceeds the internal crawler threshold.\n* `fetchclienterror` (queueItem, errorData) -\n    Fired when a request dies locally for some reason. The error data is\n    returned as the second parameter.\n* `discoverycomplete` (queueItem, resources) -\n    Fired when linked resources have been discovered. Passes an array of\n    resources (as URL's) as the second parameter.\n* `complete` -\n    Fired when the crawler completes processing all the items in its queue, and\n    does not find any more to add. This event returns no arguments.\n\n### A note about HTTP error conditions\nBy default, simplecrawler does not download the response body when it encounters\nan HTTP error status in the response. If you need this information, you can listen\nto simplecrawler's error events, and through node's native `data` event\n(`response.on(\"data\",function(chunk) {...})`) you can save the information yourself.\n\n### Waiting for asynchronous event listeners\n\nSometimes, you might want to wait for simplecrawler to wait for you while you\nperform some asynchronous tasks in an event listener, instead of having it\nracing off and firing the `complete` event, halting your crawl. For example,\nif you're doing your own link discovery using an asynchronous library method.\n\nsimplecrawler provides a `wait` method you can call at any time. It is available\nvia `this` from inside listeners, and on the crawler object itself. It returns\na callback function.\n\nOnce you've called this method, simplecrawler will not fire the `complete` event\nuntil either you execute the callback it returns, or a timeout is reached\n(configured in `crawler.listenerTTL`, by default 10000 ms.)\n\n#### Example asynchronous event listener\n\n```js\ncrawler.on(\"fetchcomplete\", function(queueItem, data, res) {\n    var continue = this.wait();\n    doSomeDiscovery(data, function(foundURLs) {\n        foundURLs.forEach(crawler.queueURL.bind(crawler));\n        continue();\n    });\n});\n```\n\n## Configuration\n\nsimplecrawler is highly configurable and there's a long list of settings you can\nchange to adapt it to your specific needs.\n\n* `crawler.host` -\n    The domain to scan. By default, simplecrawler will restrict all requests to\n    this domain.\n* `crawler.initialPath=\"/\"` -\n    The initial path with which the crawler will formulate its first request.\n    Does not restrict subsequent requests.\n* `crawler.initialPort=80` -\n    The initial port with which the crawler will formulate its first request.\n    Does not restrict subsequent requests.\n* `crawler.initialProtocol=\"http\"` -\n    The initial protocol with which the crawler will formulate its first\n    request. Does not restrict subsequent requests.\n* `crawler.interval=250` -\n    The interval with which the crawler will spool up new requests (one per\n    tick).\n* `crawler.maxConcurrency=5` -\n    The maximum number of requests the crawler will run simultaneously. Defaults\n    to 5 - the default number of http agents node will run.\n* `crawler.timeout=300000` -\n    The maximum time in milliseconds the crawler will wait for headers before\n    aborting the request.\n* `crawler.listenerTTL=10000` -\n    The maximum time in milliseconds the crawler will wait for async listeners.\n* `crawler.userAgent=\"Node/simplecrawler <version> (https://github.com/cgiffard/node-simplecrawler)\"` -\n    The user agent the crawler will report.\n* `crawler.decodeResponses=false` -\n    The response bodies will be intelligently character converted to standard\n    JavaScript strings using the\n    [iconv-lite](https://www.npmjs.com/package/iconv-lite) module. The character\n    encoding is interpreted from the Content-Type header firstly, and secondly\n    from any `&lt;meta charset=\"xxx\" /&gt;` tags.\n* `crawler.respectRobotsTxt=true` -\n    Controls whether the crawler should respect rules in robots.txt (if such a\n    file is present). The\n    [robots-parser](https://www.npmjs.com/package/robots-parser) module is used\n    to do the actual parsing.\n* `crawler.queue` -\n    The queue in use by the crawler (Must implement the `FetchQueue` interface)\n*   `crawler.allowInitialDomainChange=false` -\n    If the response for the initial URL is a redirect to another domain (e.g.\n    from github.net to github.com), update `crawler.host` to continue the\n    crawling on that domain.\n* `crawler.filterByDomain=true` -\n    Specifies whether the crawler will restrict queued requests to a given\n    domain/domains.\n* `crawler.scanSubdomains=false` -\n    Enables scanning subdomains (other than www) as well as the specified\n    domain.\n* `crawler.ignoreWWWDomain=true` -\n    Treats the `www` domain the same as the originally specified domain.\n* `crawler.stripWWWDomain=false` -\n    Or go even further and strip WWW subdomain from requests altogether!\n* `crawler.stripQuerystring=false` -\n    Specify to strip querystring parameters from URL's.\n* `crawler.discoverResources` -\n    simplecrawler's default resource discovery function -\n    which, given a buffer containing a resource, returns an array of URLs.\n    For more details about link discovery, see [Link Discovery](#link-discovery)\n* `crawler.discoverRegex` -\n    Array of regular expressions and functions that simplecrawler uses to\n    discover resources. Functions in this array are expected to return an array.\n* `crawler.cache` -\n    Specify a cache architecture to use when crawling. Must implement\n    `SimpleCache` interface. You can save the site to disk using the built in\n    file system cache like this:\n\n    ```js\n    crawler.cache = new Crawler.cache('pathToCacheDirectory');\n    ```\n\n* `crawler.useProxy=false` -\n    The crawler should use an HTTP proxy to make its requests.\n* `crawler.proxyHostname=\"127.0.0.1\"` -\n    The hostname of the proxy to use for requests.\n* `crawler.proxyPort=8123` -\n    The port of the proxy to use for requests.\n* `crawler.proxyUser=null` -\n    The username for HTTP/Basic proxy authentication (leave unset for\n    unauthenticated proxies.)\n* `crawler.proxyPass=null` -\n    The password for HTTP/Basic proxy authentication (leave unset for\n    unauthenticated proxies.)\n* `crawler.domainWhitelist` -\n    An array of domains the crawler is permitted to crawl from. If other\n    settings are more permissive, they will override this setting.\n* `crawler.supportedMimeTypes` -\n    An array of RegEx objects used to determine supported MIME types (types of\n    data simplecrawler will scan for links.) If you're  not using\n    simplecrawler's resource discovery function, this won't have any effect.\n* `crawler.allowedProtocols` -\n    An array of RegExp objects used to determine whether a URL protocol is\n    supported. This is to deal with nonstandard protocol handlers that regular\n    HTTP is sometimes given, like `feed:`. It does not provide support for\n    non-http protocols (and why would it!?)\n* `crawler.maxResourceSize=16777216` -\n    The maximum resource size that will be downloaded, in bytes. Defaults to\n    16MB.\n* `crawler.downloadUnsupported=true` -\n    simplecrawler will download files it can't parse. Defaults to true, but if\n    you'd rather save the RAM and GC lag, switch it off. When false, it closes\n    sockets for unsupported resources.\n* `crawler.needsAuth=false` -\n    Flag to specify if the domain you are hitting requires basic authentication.\n* `crawler.authUser=\"\"` -\n    Username provided for `needsAuth` flag.\n* `crawler.authPass=\"\"` -\n    Password provided for `needsAuth` flag.\n* `crawler.customHeaders` -\n    An object specifying a number of custom headers simplecrawler will add to\n    every request. These override the default headers simplecrawler sets, so be\n    careful with them. If you want to tamper with headers on a per-request\n    basis, see the `fetchqueue` event.\n* `crawler.acceptCookies=true` -\n    Flag to indicate if the crawler should hold on to cookies.\n* `crawler.urlEncoding=\"unicode\"` -\n    Set this to `iso8859` to trigger\n    [URI.js](https://medialize.github.io/URI.js/)' re-encoding of iso8859 URL's\n    to unicode.\n* `crawler.parseHTMLComments=true` -\n    Whether to scan for URL's inside HTML comments.\n* `crawler.parseScriptTags=true` -\n    Whether to scan for URL's inside script tags.\n* `crawler.maxDepth=0` -\n    Defines a maximum distance from the original request at which resources will\n    be downloaded. Asset files are excluded from this distance condition if\n    `crawler.fetchWhitelistedMimeTypesBelowMaxDepth` is `true`. Defaults to `0` —\n    no max depth.\n* `crawler.fetchWhitelistedMimeTypesBelowMaxDepth=false` -\n    If `true`, then resources (fonts, images, CSS) will be excluded from\n    `maxDepth` checks. (And therefore downloaded regardless of their depth.)\n* `crawler.ignoreInvalidSSL=false` -\n    Treat self-signed SSL certificates as valid. SSL certificates will not be\n    validated against known CAs. Only applies to https requests. You may also\n    have to set the environment variable NODE_TLS_REJECT_UNAUTHORIZED to '0'.\n    For example: `process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';`\n\n## Fetch conditions\n\nsimplecrawler has a mechanism you can use to prevent certain resources from\nbeing fetched, based on the URL, called fetch conditions. A fetch condition is a\nfunction that, when given a parsed URL object, returns a value that indicates\nwhether a given resource should be downloaded.\n\nYou may add as many fetch conditions as you like, and remove them at runtime.\nsimplecrawler will evaluate will evaluate every fetch condition until one is\nencountered that returns a falsy value. If that happens,  the resource in\nquestion will not be fetched.\n\n### Adding a fetch condition\n\nThis example fetch condition prevents URL's ending in `.pdf` from being\ndownloaded. Adding a fetch condition assigns it an ID, which the\n`addFetchCondition` function returns. You can use this ID to remove the\ncondition later.\n\n```js\nvar conditionID = myCrawler.addFetchCondition(function(parsedURL, queueItem) {\n    return !parsedURL.path.match(/\\.pdf$/i);\n});\n```\n\nFetch conditions are called with two arguments: `parsedURL` and `queueItem`.\n`parsedURL` represents the resource to be fetched (or not) and has the following\nstructure:\n\n```js\n{\n    protocol: \"http\",\n    host: \"example.com\",\n    port: 80,\n    path: \"/search?q=hello\",\n    uriPath: \"/search\",\n    depth: 2\n}\n```\n\n`queueItem` is a representation of the page where this resource was found. See\nthe [queue item documentation](#queue-items) for details on its structure.\n\nWith this information, you can write sophisticated logic for determining which\npages to fetch and which to avoid. For example, you could write a link checker\nthat checks both internal and external links, yet doesn't continue crawling\nother domains by setting `filterByDomain` to false and checking that\n`queueItem.host` is the same as `crawler.host`.\n\n### Removing a fetch condition\n\nIf you stored the ID of the fetch condition you added earlier, you can remove it\nfrom the crawler:\n\n```js\nmyCrawler.removeFetchCondition(conditionID);\n```\n\n## The queue\n\nLike any other web crawler, simplecrawler has a queue. It can be directly\naccessed through `crawler.queue` and is by default only backed by an array,\nwhich means items in the queue can be accessed through array notation. However,\nsince simplecrawler also supports different backing stores for the queue, the\nrecommended way of accessing items is through the (pseudo) asynchronous\n`crawler.queue.get` method.\n\n```js\ncrawler.queue.get(5, function (queueItem) {\n    // Do something with the queueItem\n});\n```\n\nEven though this operation is actually synchronous when the default backing\nstore is used, this method helps maintain compatibility with asynchronous\nbacking stores that would let you eg. store the queue in a database.\n\n### Manually adding to the queue\n\nThe simplest way of manually adding to the queue is to use the crawler's method\n`crawler.queueURL`. This method takes a complete URL, validates and deconstructs\nit, and adds it to the queue.\n\n```js\nvar customQueueItem = {\n    url: \"http://example.com\",\n    depth: 2\n};\n\ncrawler.queueURL(\"/example.html\", customQueueItem);\n```\n\nIf you instead want to add a resource by its components, you may call the\n`queue.add` method directly with the signature `protocol`, `hostname`, `port`,\n`path`.\n\n### Queue items\n\nBecause when working with simplecrawler, you'll constantly be handed queue items,\nit helps to know what's inside them. These are the properties every queue item\nis expected to have:\n\n* `url` - The complete, canonical URL of the resource\n* `protocol` - The protocol of the resource (http, https)\n* `host` - The full domain/hostname of the resource\n* `port` - The port of the resource\n* `path` - The URL path, including the query string\n* `uriPath` - The URL path, excluding the query string\n* `depth` - How many steps simplecrawler has taken from the initial page (which\nis depth 1) to this resource.\n* `fetched` - Has the request for this item been completed? You can monitor this\nas requests are processed.\n* `status` - The internal status of the item, always a string. This can be one\nof:\n    * `\"queued\"` - The resource is in the queue to be fetched, but nothing's\n    happened to it yet.\n    * `\"spooled\"` - A request has been made to the remote server, but we're\n    still waiting for a response.\n    * `\"headers\"` - The headers for the resource have been received.\n    * `\"downloaded\"` - The item has been entirely downloaded.\n    * `\"redirected\"` - The resource request returned a 300 series response, with\n    a Location header and a new URL.\n    * `\"notfound\"` - The resource could not be found. (404)\n    * `\"failed\"` - An error occurred when attempting to fetch the resource.\n* `stateData` - An object containing state data and other information about the\nrequest:\n    * `requestLatency` - The time taken for headers to be received after the\n    request was made.\n    * `requestTime` - The total time taken for the request (including download\n    time.)\n    * `downloadTime` - The total time taken for the resource to be downloaded.\n    * `contentLength` - The length (in bytes) of the returned content.\n    Calculated based on the `content-length` header.\n    * `contentType` - The MIME type of the content.\n    * `code` - The HTTP status code returned for the request.\n    * `headers` - An object containing the header information returned by the\n    server. This is the object node returns as part of the `response` object.\n    * `actualDataSize` - The length (in bytes) of the returned content.\n    Calculated based on what is actually received, not the `content-length`\n    header.\n    * `sentIncorrectSize` - True if the data length returned by the server did\n    not match what we were told to expect by the `content-length` header.\n\nAs you can see, you can get a lot of meta-information out about each request.\nThis has been put to use by providing some convenient methods for getting simple\naggregate data about the queue.\n\n### Queue statistics and reporting\n\nFirst of all, the queue can provide some basic statistics about the network\nperformance of your crawl so far. This is done live, so don't check it 30 times\na second. You can test the following properties:\n\n* `requestTime`\n* `requestLatency`\n* `downloadTime`\n* `contentLength`\n* `actualDataSize`\n\nYou can get the maximum, minimum, and average values for each with the\n`crawler.queue.max`, `crawler.queue.min`, and `crawler.queue.avg` functions\nrespectively. Like the `crawler.queue.get` method, these methods are pseudo\nasynchronous to support different backing stores for the queue. That means they\nwill provide both a return value and a callback.\n\n```js\ncrawler.queue.max(\"requestLatency\", function (max) {\n    console.log(\"The maximum request latency was %dms.\", max);\n});\ncrawler.queue.min(\"downloadTime\", function (min) {\n    console.log(\"The minimum download time was %dms.\", min);\n});\ncrawler.queue.avg(\"actualDataSize\", function (avg) {\n    console.log(\"The average resource size received is %d bytes.\", avg);\n});\n```\n\nYou'll probably often need to determine how many queue items have a given status\nand/or retrieve them. That's easily done with the methods\n`crawler.queue.countWithStatus` and `crawler.queue.getWithStatus`.\n\n`crawler.queue.countWithStatus` provides the number of queued items with a given\nstatus, while `crawler.queue.getWithStatus` returns an array of the queue items\nthemselves. Again, by default, these methods both return and accept callbacks.\n\n```js\ncrawler.queue.countWithStatus(\"redirected\", function (redirectCount) {\n    console.log(\"The redirect count is %d\", redirectCount);\n});\n\ncrawler.queue.getWithStatus(\"failed\", function (failedItems) {\n    failedItems.forEach(function(queueItem) {\n        console.log(\"Whoah, the request for %s failed!\", queueItem.url);\n    });\n});\n```\n\nThen there's some even simpler convenience functions:\n\n* `crawler.queue.complete` - provides the number of queue items which have been\ncompleted (marked as fetched).\n* `crawler.queue.errors` - provides the number of requests which have failed\n(404s and other 400/500 errors, as well as client errors).\n\n### Saving and reloading the queue (freeze/defrost)\n\nIt can be convenient to be able to save the crawl progress and later be able to\nreload it if your application fails or you need to abort the crawl for some\nreason. The `crawler.queue.freeze` and `crawler.queue.defrost` methods will let\nyou do this.\n\n**A word of warning** - they are not CPU friendly as they rely on `JSON.parse`\nand `JSON.stringify`. Use them only when you need to save the queue - don't call\nthem after every request or your application's performance will be incredibly\npoor - they block like *crazy*. That said, using them when your crawler\ncommences and stops is perfectly reasonable.\n\nNote that the methods themselves are asynchronous, so if you are going to exit\nthe process after you do the freezing, make sure you wait for callback -\notherwise you'll get an empty file.\n\n```js\ncrawler.queue.freeze(\"mysavedqueue.json\", function () {\n    process.exit();\n});\n\ncrawler.queue.defrost(\"mysavedqueue.json\");\n```\n\n## Cookies\n\nsimplecrawler has an internal cookie jar, which collects and resends cookies\nautomatically and by default. If you want to turn this off, set the\n`crawler.acceptCookies` option to `false`. The cookie jar is accessible via\n`crawler.cookies`, and is an event emitter itself.\n\n### Cookie events\n\n* `addcookie` (cookie)\nFired when a new cookie is added to the jar.\n* `removecookie` (cookie array)\nFired when one or more cookies are removed from the jar.\n\n## Link Discovery\n\nsimplecrawler's discovery function is made to be replaceable — you can\neasily write your own that discovers only the links you're interested in.\n\nThe method must accept a buffer and a [`queueItem`](#queue-items), and\nreturn the resources that are to be added to the queue.\n\nIt is quite common to pair simplecrawler with a module like\n[cheerio](https://npmjs.com/package/cheerio) that can correctly parse\nHTML and provide a DOM like API for querying — or even a whole headless\nbrowser, like phantomJS.\n\nThe example below demonstrates how one might achieve basic HTML-correct\ndiscovery of only link tags using cheerio.\n\n```js\ncrawler.discoverResources = function(buffer, queueItem) {\n    var $ = cheerio.load(buffer.toString(\"utf8\"));\n\n    return $(\"a[href]\").map(function (element) {\n        return $(element).attr(\"href\");\n    });\n};\n```\n\n## FAQ/Troubleshooting\n\nThere are a couple of questions that pop up more often than others in the issue\ntracker. If you're having trouble with simplecrawler, please have a look at the\nlist below before submitting an issue.\n\n- **Q: Why does simplecrawler discover so many invalid URLs?**\n\n    A: simplecrawler's built-in discovery method is purposefully naïve - it's a\n    brute force approach intended to find everything: URLs in comments, binary files,\n    scripts, image EXIF data, inside CSS documents, and more — useful for archiving\n    and use cases where it's better to have false positives than fail to discover a\n    resource.\n    \n    It's definitely not a solution for every case, though — if you're\n    writing a link checker or validator, you don't want erroneous 404s\n    throwing errors. Therefore, simplecrawler allows you to tune discovery in a few\n    key ways:\n    \n    - You can either add to (or remove from) the `discoverRegex` array, tweaking\n      the search patterns to meet your requirements; or\n    - Swap out the `discoverResources` method. Parsing HTML pages is beyond the\n      scope of simplecrawler, but it is very common to combine simplecrawler with\n      a module like [cheerio](https://npmjs.com/package/cheerio) for more\n      sophisticated resource discovery.\n    \n    Further documentation is available in the [link discovery](#link-discovery)\n    section.\n      \n- **Q: Why did simplecrawler complete without fetching any resources?**\n\n    A: When this happens, it is usually because the initial request was redirected\n    to a different domain that wasn't in the `domainWhitelist`.\n\n- **Q: What does it mean that events are asynchronous?**\n    \n    A: One of the core concepts of node.js is its asynchronous nature. I/O\n    operations (like network requests) take place outside of the main thread (which\n    is where your code is executed). This is what makes node fast, the fact that it\n    can continue executing code while there are multiple HTTP requests in flight,\n    for example. But to be able to get back the result of the HTTP request, we need\n    to register a function that will be called when the result is ready. This is the\n    same concept as with AJAX requests in the browser.\n\n- **Q: Promises are nice, can I use them with simplecrawler?**\n\n    A: No, not really. Promises are meant as a replacement for callbacks, but\n    simplecrawler is event driven, not callback driven. Using callbacks to any\n    greater extent in simplecrawler wouldn't make much sense, since you normally\n    need to react more than once to what happens in simplecrawler.\n\n## Current Maintainers\n\n* [Christopher Giffard](https://github.com/cgiffard)\n* [Fredrik Ekelund](https://github.com/fredrikekelund)\n* [XhmikosR](https://github.com/XhmikosR)\n\n## Contributors\n\nsimplecrawler has benefited from the kind efforts of dozens of contributors, to\nwhom we are incredibly grateful. We originally listed their individual\ncontributions but it became pretty unweildy - the\n[full list can be found here.](https://github.com/cgiffard/node-simplecrawler/graphs/contributors)\n\n## License\n\nCopyright (c) 2016, Christopher Giffard.\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the above copyright notice, this\n  list of conditions and the following disclaimer in the documentation and/or\n  other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n",
  "readmeFilename": "README.md",
  "_id": "simplecrawler@0.6.2",
  "_shasum": "34b21430df3ef3c508031caf40fd702c673d91a9",
  "_from": "git+https://github.com/cgiffard/node-simplecrawler.git",
  "_resolved": "git+https://github.com/cgiffard/node-simplecrawler.git#79aba4906c04ad9da6aabbc922725825d32897a2"
}
